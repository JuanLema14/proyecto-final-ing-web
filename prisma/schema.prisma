generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EstadoPedido {
  RECIBIDO
  EN_PREPARACION
  LISTO_PARA_ENTREGAR
  EN_CAMINO
  COMPLETADO
  CANCELADO
}

enum TipoPedido {
  EN_LOCAL
  A_DOMICILIO
  PARA_RECOGER
}

enum EstadoMesa {
  DISPONIBLE
  OCUPADA
  RESERVADA
  INACTIVA
}

enum EstadoReserva {
  CONFIRMADA
  PENDIENTE
  CANCELADA
  COMPLETADA
}

enum EstadoEntrega {
  PENDIENTE
  ASIGNADO
  EN_RUTA
  ENTREGADO
  FALLIDO
}

enum TipoMetodoPago {
  ONLINE
  OFFLINE
}

enum EstadoPago {
  PENDIENTE
  COMPLETADO
  FALLIDO
  REEMBOLSADO
}

enum TipoTokenVerificacion {
  VERIFICACION_EMAIL
  RESETEO_CONTRASENA
}

model Sucursal {
  id            Int      @id @default(autoincrement())
  nombre        String
  direccion     String
  ciudad        String
  telefono      String
  emailContacto String   @map("email_contacto")
  horaApertura  DateTime @map("hora_apertura") @db.Time
  horaCierre    DateTime @map("hora_cierre") @db.Time
  estaActiva    Boolean  @default(true) @map("esta_activa")
  creadoEn      DateTime @default(now()) @map("creado_en")

  empleados      Usuario[]
  pedidos        Pedido[]
  mesas          Mesa[]
  itemsMenu      SucursalItemMenu[]
  inventario     InventarioSucursal[]
  calificaciones CalificacionSucursal[]
  movimientos    Movimiento[]

  @@map("sucursales")
}

model Rol {
  id          Int      @id @default(autoincrement())
  nombreRol   String   @unique @map("nombre_rol")
  descripcion String?
  creadoEn    DateTime @default(now()) @map("creado_en")

  usuarios UsuarioRol[]

  @@map("roles")
}

model Usuario {
  id              Int       @id @default(autoincrement())
  idSucursal      Int?      @map("id_sucursal")
  nombre          String?
  apellido        String?
  email           String    @unique
  // La contraseña es opcional porque un usuario puede registrarse a través de un proveedor OAuth (Google, etc.)
  hashContrasena  String?   @map("hash_contrasena")
  telefono        String?
  estaActivo      Boolean   @default(true) @map("esta_activo")
  emailVerificado DateTime? @map("email_verificado")
  ultimoAcceso    DateTime? @map("ultimo_acceso")
  creadoEn        DateTime  @default(now()) @map("creado_en")

  // Relaciones
  sucursal                 Sucursal?              @relation(fields: [idSucursal], references: [id])
  roles                    UsuarioRol[]
  pedidos                  Pedido[]
  reservas                 Reserva[]
  entregasAsignadas        Entrega[]
  calificacionesItems      CalificacionItem[]
  calificacionesSucursales CalificacionSucursal[]
  sesiones                 Sesion[]
  tokensVerificacion       TokensVerificacion[]
  // Relación para soportar Login Social (OAuth)
  accounts                 Account[]
  movimientos              Movimiento[]

  @@map("usuarios")
}

// =======================================
// NUEVO MODELO PARA LOGIN SOCIAL (OAuth)
// =======================================
model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String // ej: "oauth", "oidc"
  provider          String // ej: "google", "github"
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  usuario Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UsuarioRol {
  idUsuario Int @map("id_usuario")
  idRol     Int @map("id_rol")

  usuario Usuario @relation(fields: [idUsuario], references: [id])
  rol     Rol     @relation(fields: [idRol], references: [id])

  @@id([idUsuario, idRol])
  @@map("usuario_roles")
}

model CategoriaMenu {
  id          Int     @id @default(autoincrement())
  nombre      String  @unique
  descripcion String?

  itemsMenu ItemMenu[]

  @@map("categorias_menu")
}

model ItemMenu {
  id          Int     @id @default(autoincrement())
  idCategoria Int     @map("id_categoria")
  nombre      String
  descripcion String?
  precio      Decimal @db.Decimal(10, 2)
  urlImagen   String? @map("url_imagen")
  disponible  Boolean @default(true)

  categoria   CategoriaMenu      @relation(fields: [idCategoria], references: [id])
  sucursales  SucursalItemMenu[]
  receta      Receta[]
  itemsPedido ItemPedido[]

  @@map("items_menu")
}

model SucursalItemMenu {
  idSucursal Int @map("id_sucursal")
  idItemMenu Int @map("id_item_menu")

  sucursal Sucursal @relation(fields: [idSucursal], references: [id])
  itemMenu ItemMenu @relation(fields: [idItemMenu], references: [id])

  @@id([idSucursal, idItemMenu])
  @@map("sucursal_items_menu")
}

model Ingrediente {
  id           Int    @id @default(autoincrement())
  nombre       String @unique
  unidadMedida String @map("unidad_medida")

  inventarios InventarioSucursal[]
  recetas     Receta[]
  movimientos Movimiento[]

  @@map("ingredientes")
}

model InventarioSucursal {
  idSucursal          Int      @map("id_sucursal")
  idIngrediente       Int      @map("id_ingrediente")
  stockActual         Decimal  @default(0) @map("stock_actual") @db.Decimal(10, 2)
  stockMinimo         Decimal  @default(0) @map("stock_minimo") @db.Decimal(10, 2)
  ultimaActualizacion DateTime @updatedAt @map("ultima_actualizacion")

  sucursal    Sucursal    @relation(fields: [idSucursal], references: [id])
  ingrediente Ingrediente @relation(fields: [idIngrediente], references: [id])

  @@id([idSucursal, idIngrediente])
  @@map("inventario_sucursal")
}

model Movimiento {
  id            Int      @id @default(autoincrement())
  idSucursal    Int      @map("id_sucursal")
  idIngrediente Int      @map("id_ingrediente")
  tipo          String // "ENTRADA" o "SALIDA"
  cantidad      Decimal  @db.Decimal(10, 2)
  idUsuario     Int      @map("id_usuario") // Quién hizo el movimiento
  creadoEn      DateTime @default(now()) @map("creado_en")

  sucursal    Sucursal    @relation(fields: [idSucursal], references: [id])
  ingrediente Ingrediente @relation(fields: [idIngrediente], references: [id])
  usuario     Usuario     @relation(fields: [idUsuario], references: [id])

  @@map("movimientos")
}

model Receta {
  idItemMenu        Int     @map("id_item_menu")
  idIngrediente     Int     @map("id_ingrediente")
  cantidadRequerida Decimal @map("cantidad_requerida") @db.Decimal(10, 2)

  itemMenu    ItemMenu    @relation(fields: [idItemMenu], references: [id])
  ingrediente Ingrediente @relation(fields: [idIngrediente], references: [id])

  @@id([idItemMenu, idIngrediente])
  @@map("recetas")
}

model Pedido {
  id           Int          @id @default(autoincrement())
  idSucursal   Int          @map("id_sucursal")
  idCliente    Int          @map("id_cliente")
  estado       EstadoPedido @default(RECIBIDO)
  tipo         TipoPedido
  subtotal     Decimal      @db.Decimal(10, 2)
  impuestos    Decimal      @db.Decimal(10, 2)
  totalPedido  Decimal      @map("total_pedido") @db.Decimal(10, 2)
  notasCliente String?      @map("notas_cliente")
  creadoEn     DateTime     @default(now()) @map("creado_en")

  sucursal    Sucursal          @relation(fields: [idSucursal], references: [id])
  cliente     Usuario           @relation(fields: [idCliente], references: [id])
  items       ItemPedido[]
  pagos       Pago[]
  entrega     Entrega?
  promociones PedidoPromocion[]

  @@map("pedidos")
}

model ItemPedido {
  id             Int     @id @default(autoincrement())
  idPedido       Int     @map("id_pedido")
  idItemMenu     Int     @map("id_item_menu")
  cantidad       Int
  precioUnitario Decimal @map("precio_unitario") @db.Decimal(10, 2)
  subtotalItem   Decimal @map("subtotal_item") @db.Decimal(10, 2)

  pedido       Pedido            @relation(fields: [idPedido], references: [id])
  itemMenu     ItemMenu          @relation(fields: [idItemMenu], references: [id])
  calificacion CalificacionItem?

  @@map("items_pedido")
}

model Pago {
  id                   Int        @id @default(autoincrement())
  idPedido             Int        @map("id_pedido")
  idMetodoPago         Int        @map("id_metodo_pago")
  monto                Decimal    @db.Decimal(10, 2)
  estado               EstadoPago @default(PENDIENTE)
  idTransaccionGateway String?    @map("id_transaccion_gateway")
  datosGateway         Json?      @map("datos_gateway")
  fechaPago            DateTime   @default(now()) @map("fecha_pago")

  pedido     Pedido     @relation(fields: [idPedido], references: [id])
  metodoPago MetodoPago @relation(fields: [idMetodoPago], references: [id])
  recibo     Recibo?

  @@map("pagos")
}

model MetodoPago {
  id               Int            @id @default(autoincrement())
  nombre           String         @unique
  tipo             TipoMetodoPago
  proveedorGateway String?        @map("proveedor_gateway")
  estaActivo       Boolean        @default(true) @map("esta_activo")

  pagos Pago[]

  @@map("metodos_pago")
}

model Recibo {
  id               Int      @id @default(autoincrement())
  idPago           Int      @unique @map("id_pago")
  codigoRecibo     String   @unique @map("codigo_recibo")
  urlPdf           String   @map("url_pdf")
  detallesFiscales Json     @map("detalles_fiscales")
  fechaEmision     DateTime @default(now()) @map("fecha_emision")

  pago Pago @relation(fields: [idPago], references: [id])

  @@map("recibos")
}

model Entrega {
  id                  Int           @id @default(autoincrement())
  idPedido            Int           @unique @map("id_pedido")
  idRepartidor        Int           @map("id_repartidor")
  direccionEntrega    String        @map("direccion_entrega")
  estado              EstadoEntrega @default(PENDIENTE)
  horaSalida          DateTime?     @map("hora_salida")
  horaEntregaEstimada DateTime?     @map("hora_entrega_estimada")
  horaEntregaReal     DateTime?     @map("hora_entrega_real")

  pedido     Pedido  @relation(fields: [idPedido], references: [id])
  repartidor Usuario @relation(fields: [idRepartidor], references: [id])

  @@map("entregas")
}

model Promocion {
  id                  Int      @id @default(autoincrement())
  codigo              String   @unique
  descripcion         String?
  porcentajeDescuento Decimal? @map("porcentaje_descuento") @db.Decimal(5, 2)
  montoDescuento      Decimal? @map("monto_descuento") @db.Decimal(10, 2)
  fechaInicio         DateTime @map("fecha_inicio")
  fechaFin            DateTime @map("fecha_fin")
  estaActiva          Boolean  @default(true) @map("esta_activa")

  pedidos PedidoPromocion[]

  @@map("promociones")
}

model PedidoPromocion {
  idPedido        Int     @map("id_pedido")
  idPromocion     Int     @map("id_promocion")
  montoDescontado Decimal @map("monto_descontado") @db.Decimal(10, 2)

  pedido    Pedido    @relation(fields: [idPedido], references: [id])
  promocion Promocion @relation(fields: [idPromocion], references: [id])

  @@id([idPedido, idPromocion])
  @@map("pedido_promociones")
}

model Mesa {
  id                   Int        @id @default(autoincrement())
  idSucursal           Int        @map("id_sucursal")
  numeroMesa           String     @map("numero_mesa")
  capacidad            Int
  ubicacionDescripcion String?    @map("ubicacion_descripcion")
  estado               EstadoMesa @default(DISPONIBLE)

  sucursal Sucursal  @relation(fields: [idSucursal], references: [id])
  reservas Reserva[]

  @@map("mesas")
}

model Reserva {
  id               Int           @id @default(autoincrement())
  idCliente        Int           @map("id_cliente")
  idMesa           Int           @map("id_mesa")
  fechaHoraReserva DateTime      @map("fecha_hora_reserva")
  numeroPersonas   Int           @map("numero_personas")
  estado           EstadoReserva @default(PENDIENTE)
  notasCliente     String?       @map("notas_cliente")
  creadoEn         DateTime      @default(now()) @map("creado_en")

  cliente Usuario @relation(fields: [idCliente], references: [id])
  mesa    Mesa    @relation(fields: [idMesa], references: [id])

  @@map("reservas")
}

model CalificacionItem {
  id            BigInt   @id @default(autoincrement())
  idItemPedido  Int      @unique @map("id_item_pedido")
  idUsuario     Int      @map("id_usuario")
  puntuacion    Int
  comentario    String?
  fechaCreacion DateTime @default(now()) @map("fecha_creacion")

  itemPedido ItemPedido @relation(fields: [idItemPedido], references: [id])
  usuario    Usuario    @relation(fields: [idUsuario], references: [id])

  @@map("calificaciones_items")
}

model CalificacionSucursal {
  id                  BigInt   @id @default(autoincrement())
  idSucursal          Int      @map("id_sucursal")
  idUsuario           Int      @map("id_usuario")
  puntuacionServicio  Int      @map("puntuacion_servicio")
  puntuacionAmbiente  Int      @map("puntuacion_ambiente")
  puntuacionComida    Int      @map("puntuacion_comida")
  comentarioGeneral   String?  @map("comentario_general")
  visiblePublicamente Boolean  @default(true) @map("visible_publicamente")
  fechaCreacion       DateTime @default(now()) @map("fecha_creacion")

  sucursal Sucursal @relation(fields: [idSucursal], references: [id])
  usuario  Usuario  @relation(fields: [idUsuario], references: [id])

  @@map("calificaciones_sucursales")
}

model Sesion {
  id               String   @id @default(cuid())
  idUsuario        Int      @map("id_usuario")
  hashRefreshToken String   @map("hash_refresh_token")
  userAgent        String   @map("user_agent")
  clientIp         String   @map("client_ip")
  estaBloqueada    Boolean  @default(false) @map("esta_bloqueada")
  expiraEn         DateTime @map("expira_en")
  creadoEn         DateTime @default(now()) @map("creado_en")

  usuario Usuario @relation(fields: [idUsuario], references: [id], onDelete: Cascade)

  @@map("sesiones")
}

model TokensVerificacion {
  id        Int                   @id @default(autoincrement())
  idUsuario Int                   @map("id_usuario")
  hashToken String                @unique @map("hash_token")
  tipo      TipoTokenVerificacion
  expiraEn  DateTime              @map("expira_en")
  usadoEn   DateTime?             @map("usado_en")

  usuario Usuario @relation(fields: [idUsuario], references: [id], onDelete: Cascade)

  @@map("tokens_verificacion")
}
